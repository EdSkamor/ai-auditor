{
  "name": "ai-auditor-worker",
  "script": "\n// AI Auditor Cloudflare Worker\naddEventListener('fetch', event => {\n  event.respondWith(handleRequest(event.request))\n})\n\nasync function handleRequest(request) {\n  const url = new URL(request.url)\n  \n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n    'Access-Control-Max-Age': '86400'\n  }\n  \n  // Handle preflight requests\n  if (request.method === 'OPTIONS') {\n    return new Response(null, { status: 204, headers: corsHeaders })\n  }\n  \n  // Authentication\n  const authHeader = request.headers.get('Authorization')\n  if (!authHeader || !authHeader.includes('TwojPIN123!')) {\n    return new Response(JSON.stringify({error: 'Unauthorized'}), {\n      status: 401,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n  \n  // Route handling\n  if (url.pathname === '/health') {\n    return new Response(JSON.stringify({\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      service: 'AI Auditor Cloudflare Worker'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n  \n  if (url.pathname === '/upload') {\n    return handleFileUpload(request, corsHeaders)\n  }\n  \n  if (url.pathname === '/audit') {\n    return handleAuditRequest(request, corsHeaders)\n  }\n  \n  if (url.pathname === '/results') {\n    return handleResultsRequest(request, corsHeaders)\n  }\n  \n  return new Response(JSON.stringify({error: 'Not found'}), {\n    status: 404,\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n  })\n}\n\nasync function handleFileUpload(request, corsHeaders) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file')\n    \n    if (!file) {\n      return new Response(JSON.stringify({error: 'No file provided'}), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    // Store file in Cloudflare KV\n    const fileId = generateFileId()\n    await AI_AUDITOR_FILES.put(fileId, await file.arrayBuffer())\n    \n    return new Response(JSON.stringify({\n      success: true,\n      fileId: fileId,\n      filename: file.name,\n      size: file.size,\n      timestamp: new Date().toISOString()\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({error: error.message}), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nasync function handleAuditRequest(request, corsHeaders) {\n  try {\n    const data = await request.json()\n    const { fileId, auditType, parameters } = data\n    \n    // Validate file exists\n    const file = await AI_AUDITOR_FILES.get(fileId)\n    if (!file) {\n      return new Response(JSON.stringify({error: 'File not found'}), {\n        status: 404,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    // Create audit job\n    const jobId = generateJobId()\n    const auditJob = {\n      id: jobId,\n      fileId: fileId,\n      auditType: auditType,\n      parameters: parameters,\n      status: 'pending',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n    \n    await AI_AUDITOR_JOBS.put(jobId, JSON.stringify(auditJob))\n    \n    // Queue for processing (in real implementation, this would trigger the local system)\n    await queueAuditJob(auditJob)\n    \n    return new Response(JSON.stringify({\n      success: true,\n      jobId: jobId,\n      status: 'pending',\n      message: 'Audit job queued successfully'\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({error: error.message}), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nasync function handleResultsRequest(request, corsHeaders) {\n  try {\n    const url = new URL(request.url)\n    const jobId = url.searchParams.get('jobId')\n    \n    if (!jobId) {\n      return new Response(JSON.stringify({error: 'Job ID required'}), {\n        status: 400,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    const job = await AI_AUDITOR_JOBS.get(jobId)\n    if (!job) {\n      return new Response(JSON.stringify({error: 'Job not found'}), {\n        status: 404,\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n      })\n    }\n    \n    const jobData = JSON.parse(job)\n    \n    // Get results if available\n    const results = await AI_AUDITOR_RESULTS.get(jobId)\n    \n    return new Response(JSON.stringify({\n      job: jobData,\n      results: results ? JSON.parse(results) : null\n    }), {\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  } catch (error) {\n    return new Response(JSON.stringify({error: error.message}), {\n      status: 500,\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\n    })\n  }\n}\n\nfunction generateFileId() {\n  return 'file_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now()\n}\n\nfunction generateJobId() {\n  return 'job_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now()\n}\n\nasync function queueAuditJob(auditJob) {\n  // In real implementation, this would send a message to the local system\n  // For now, we'll just log it\n  console.log('Audit job queued:', auditJob.id)\n}\n",
  "compatibility_date": "2024-01-15",
  "compatibility_flags": [
    "nodejs_compat"
  ],
  "bindings": [
    {
      "name": "AI_AUDITOR_FILES",
      "type": "kv_namespace",
      "namespace_id": "ai_auditor_files"
    },
    {
      "name": "AI_AUDITOR_JOBS",
      "type": "kv_namespace",
      "namespace_id": "ai_auditor_jobs"
    },
    {
      "name": "AI_AUDITOR_RESULTS",
      "type": "kv_namespace",
      "namespace_id": "ai_auditor_results"
    }
  ]
}
